{"version":3,"sources":["api/api.ts","App.tsx","components/UserList/UserList.tsx","components/MessageList/MessageList.tsx","components/Message/Message.tsx","components/TitleTop/TitleTop.tsx","reportWebVitals.ts","index.tsx"],"names":["URL","URL_SEND","getData","fetch","method","mode","then","todos","text","getMessages","id","a","data","result","eval","selectedUserData","filter","user","sendData","message","body","headers","response","json","console","log","error","App","state","selectedUserId","changeUser","setState","componentDidMount","res","jsonResult","this","className","value","onSelect","React","Component","UserList","lastMessage","messages","last","length","msg","getTypeOfMessage","type","props","map","classNames","onClick","src","icon","alt","name","MessageList","userMessage","inputHandler","event","target","buttonSendHandler","preventDefault","nowTime","Date","now","newObj","time","prevProps","messageInfo","uuid4","onSubmit","placeholder","onChange","MessageStyle","realTime","toLocaleTimeString","TitleTop","usersInfo","chooseUser","find","staff","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.13600cff.chunk.js","sourcesContent":["const URL = 'https://ice.dating/get_data.js';\r\nconst URL_SEND = 'https://ice.dating/set_data.js';\r\n\r\nexport function getData(){\r\n    return fetch(URL, {method: 'GET', mode: 'cors'})\r\n    .then(todos => todos?.text())\r\n  };\r\n\r\n\r\n\r\nexport const getMessages = async (id: number) => {\r\n  let data = await getData();\r\n  let result = eval(data);\r\n  let selectedUserData = result.filter((user: { id: any; }) => user.id === id);\r\n  return selectedUserData[0];\r\n}\r\n\r\nexport const sendData = async (id:number, message:string): Promise<void> => {\r\n  const data = `{to_user_id: ${id}, msg: ${message}}`;\r\n  try {\r\n    const response = await fetch(URL_SEND, {\r\n      method: 'POST',\r\n      body: data,\r\n      headers: {\r\n        'Content-Type': 'text/html'\r\n      }\r\n    });\r\n    const json = await response.text();\r\n    console.log('Успех:', json);\r\n  } catch (error) {\r\n    console.error('Ошибка:', error);\r\n  }\r\n}\r\n","import React from \"react\";\r\nimport {getData} from \"./api/api\";\r\nimport { UserList } from \"./components/UserList/UserList\";\r\nimport {MessageList} from \"./components/MessageList/MessageList\";\r\nimport {TitleTop} from \"./components/TitleTop/TitleTop\";\r\nimport \"./App.scss\"\r\nimport {Users} from \"./types\";\r\n\r\ninterface State {\r\n  selectedUserId: number,\r\n  getData: Users[]\r\n}\r\n\r\nexport class App extends React.Component<{},State> {\r\n  state = {\r\n    selectedUserId: 124,\r\n    getData: [] as Users[],\r\n  }\r\n\r\n  changeUser = (id: number) => {\r\n    if (this.state.selectedUserId !== id) {\r\n      this.setState({\r\n        selectedUserId: id,\r\n      });\r\n    }\r\n  };\r\n\r\n  componentDidMount = async() => {\r\n    let res = await getData();\r\n    let jsonResult = eval(res);\r\n    this.setState(state => ({\r\n      getData: jsonResult\r\n    }))\r\n  };\r\n\r\n  render() {\r\n    const { selectedUserId, getData } = this.state;\r\n    return (\r\n        <div className=\"app\">\r\n          <div className=\"header\">\r\n            <div className=\"header__select--container\">\r\n              <select className=\"header__select\">\r\n                <option value='all'>Все сообщения</option>\r\n                <option value='read'>Прочитанные</option>\r\n              </select>\r\n            </div>\r\n            <TitleTop data={this.state.getData} selectedUserId={this.state.selectedUserId} />\r\n          </div>\r\n          <UserList onSelect={this.changeUser} selectedUserId={selectedUserId} getData={getData} />\r\n          <MessageList selectedUserId={selectedUserId} />\r\n        </div>\r\n    )\r\n  }\r\n}\r\n","import React from \"react\";\r\nimport { Users } from \"../../types\";\r\nimport { getData } from \"../../api/api\";\r\nimport { Message } from \"../../types\";\r\nimport './UserList.scss';\r\nimport classNames from \"classnames\";\r\n\r\ninterface Props {\r\n  onSelect: (id: number) => void;\r\n  selectedUserId: number;\r\n  getData: Users[],\r\n}\r\n\r\nexport class UserList extends React.Component<Props, {}> {\r\n\r\n  lastMessage = (messages: Message[]) => {\r\n    let last = messages[messages.length-1];\r\n    return last?.msg\r\n  };\r\n\r\n  getTypeOfMessage = (messages: Message[]) => {\r\n    const lastMessage = messages[messages.length-1];\r\n    if(lastMessage?.type === 'to') {\r\n      return 'Ты: '\r\n    }\r\n    return ''\r\n  };\r\n\r\n  componentDidMount = async() => {\r\n    let res = await getData();\r\n    let jsonResult = eval(res);\r\n    this.setState(state => ({\r\n      getData: jsonResult\r\n    }))\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <div className='user__list--container'>\r\n        {\r\n          this.props.getData.map(user => (\r\n            <div\r\n                key={user.id}\r\n                className={classNames(\"user__list--item\", {\r\n                  \"selected\": user.id === this.props.selectedUserId,\r\n                })}\r\n                onClick={() => this.props.onSelect(user.id)}\r\n            >\r\n              <img\r\n                src={user.icon}\r\n                alt={user.name}\r\n                className=\"user__list--image\"\r\n              />\r\n              <li className=\"user__list--name\">{user.name}</li>\r\n              <p className=\"user__list--message-you\"\r\n              >{this.getTypeOfMessage(user.messages)}\r\n                <span className=\"user__list--message\">{this.lastMessage(user.messages)}</span>\r\n              </p>\r\n            </div>\r\n          )\r\n        )\r\n        }\r\n    </div>\r\n    )\r\n  }\r\n}\r\n","import React from \"react\";\r\nimport {getData,getMessages,sendData} from \"../../api/api\";\r\nimport { Message } from \"../../types\";\r\nimport { MessageStyle } from \"../Message/Message\";\r\nimport \"./MessageList.scss\";\r\nimport { v4 as uuid4 } from 'uuid';\r\n\r\ninterface Props {\r\n  selectedUserId: number,\r\n}\r\n\r\ninterface State {\r\n  messages: Message[],\r\n  userMessage: string,\r\n}\r\n\r\n\r\nexport class MessageList extends React.Component<Props, State> {\r\n  state = {\r\n    messages: [] as Message[],\r\n    userMessage: '',\r\n  };\r\n\r\n  async componentDidMount() {\r\n    const res = await getMessages(this.props.selectedUserId);\r\n    let jsonResult = eval(res);\r\n    console.log(jsonResult)\r\n    this.setState({\r\n      messages: jsonResult.messages\r\n    })\r\n  }\r\n\r\n  async componentDidUpdate(prevProps: Readonly<Props>) {\r\n    if (prevProps.selectedUserId !== this.props.selectedUserId) {\r\n      const res = await getMessages(this.props.selectedUserId);\r\n      let jsonResult = eval(res);\r\n      this.setState(state => ({\r\n        messages: jsonResult.messages\r\n      }))\r\n    }\r\n  }\r\n\r\n  inputHandler = (event: React.ChangeEvent<HTMLInputElement>) => {\r\n    const { value } = event.target;\r\n    this.setState({\r\n      userMessage: value,\r\n    })\r\n  };\r\n\r\n  buttonSendHandler = (event: React.FormEvent<HTMLFormElement>) => {\r\n    event.preventDefault();\r\n    let nowTime = Date.now();\r\n    console.log(nowTime);\r\n\r\n    const newObj = {\r\n      type: 'from',\r\n      msg: this.state.userMessage,\r\n      time: nowTime,\r\n    }\r\n\r\n    sendData(this.props.selectedUserId, this.state.userMessage);\r\n\r\n    let result =  sendData(this.props.selectedUserId, this.state.userMessage);\r\n    console.log(result);\r\n\r\n    this.setState(state => ({\r\n      messages: [...state.messages, newObj],\r\n      userMessage: '',\r\n    }))\r\n  }\r\n\r\n  render() {\r\n    const { messages, userMessage} = this.state;\r\n    return (\r\n      <div className='message__container'>\r\n        <div className='message__list'>\r\n          {messages.map((message:Message) => (<MessageStyle messageInfo={message} key={uuid4()} />))}\r\n        </div>\r\n        <form\r\n            onSubmit={this.buttonSendHandler}\r\n            className='message__send'\r\n        >\r\n          <input\r\n              className='message__send--input'\r\n              type='text'\r\n              placeholder='Твое сообщение... (Enter чтобы отправить)'\r\n              value={userMessage}\r\n              onChange={this.inputHandler}\r\n          />\r\n          <div className='message__send--icons'></div>\r\n          <button\r\n              type='submit'\r\n              className='button__send'\r\n          ></button>\r\n        </form>\r\n      </div>\r\n    )\r\n  }\r\n}\r\n","import React from \"react\";\r\nimport {Message} from \"../../types\";\r\nimport classNames from 'classnames';\r\nimport './Message.scss';\r\n\r\ntype Props = {\r\n  messageInfo: Message,\r\n}\r\n\r\nexport class MessageStyle extends React.Component<Props, {}> {\r\n\r\n  render() {\r\n\r\n    const { type, msg, time } = this.props.messageInfo;\r\n    const date = new Date(time);\r\n    const realTime = date.toLocaleTimeString();\r\n    console.log(realTime)\r\n    console.log(this.props.messageInfo)\r\n\r\n    return (\r\n        <div className={classNames(\r\n            'message', {\r\n              'message__from': type === 'from',\r\n              'message__to': type === 'to',\r\n            },\r\n        )}>\r\n          <span className={classNames(\r\n              'message__type', {\r\n                'from': type === 'from',\r\n                'to': type === 'to',\r\n              },\r\n          )}>{msg}</span>\r\n          <small className='message__time'>{realTime}</small>\r\n        </div>\r\n    )\r\n  }\r\n}\r\n","import React from \"react\";\r\nimport { Users } from \"../../types\";\r\nimport { getData } from \"../../api/api\";\r\nimport './TitleTop.scss';\r\n\r\ntype Props = {\r\n  data: Users[]\r\n  selectedUserId: number,\r\n}\r\n\r\nexport class TitleTop extends React.Component<Props,{}> {\r\n  state = {\r\n    usersInfo: [] as Users[]\r\n  }\r\n\r\n  componentDidMount = async() => {\r\n    let res = await getData();\r\n    let jsonResult = eval(res);\r\n    this.setState({\r\n      usersInfo: jsonResult\r\n    })\r\n  };\r\n\r\n  chooseUser = () => {\r\n    const result = this.state.usersInfo.find(user => user.id === this.props.selectedUserId);\r\n    return result;\r\n  }\r\n\r\n  render() {\r\n    const { usersInfo } = this.state;\r\n    let staff = this.chooseUser();\r\n    return (\r\n        <div className=\"header__user-info\">\r\n          <img className=\"header__user--picture\" src={staff?.icon} alt={staff?.name}/>\r\n          <p className=\"header__user--name\">{staff?.name}</p>\r\n          <p className=\"header__user--relation\">Вы понравились друг другу вчера</p>\r\n          <div className=\"header__user--gallery\"></div>\r\n        </div>\r\n    )\r\n  }\r\n}\r\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport {App} from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}